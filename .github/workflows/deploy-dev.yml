name: Deploy to Development

on:
  push:
    branches:
      - develop
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run type checking
        run: pnpm run check
        
      - name: Build application
        run: pnpm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    environment: development
    steps:
      - name: Deploy to Render Dev
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_DEV_SERVICE_ID }}
        run: |
          curl -X POST \
            "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys" \
            -H "Authorization: Bearer ${RENDER_API_KEY}" \
            -H "Content-Type: application/json" \
            -d '{"clearCache": false}'
            
      - name: Notify deployment started
        if: success()
        run: |
          echo "üöÄ Development deployment started for commit ${{ github.sha }}"
          
      - name: Wait for deployment
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_DEV_SERVICE_ID }}
        run: |
          echo "Waiting for deployment to complete..."
          sleep 30
          
          for i in {1..20}; do
            DEPLOY_STATUS=$(curl -s \
              "https://api.render.com/v1/services/${RENDER_SERVICE_ID}/deploys?limit=1" \
              -H "Authorization: Bearer ${RENDER_API_KEY}" \
              | jq -r '.[0].deploy.status')
              
            echo "Deployment status: ${DEPLOY_STATUS}"
            
            if [[ "${DEPLOY_STATUS}" == "live" ]]; then
              echo "‚úÖ Deployment successful!"
              exit 0
            elif [[ "${DEPLOY_STATUS}" == "build_failed" ]] || [[ "${DEPLOY_STATUS}" == "update_failed" ]]; then
              echo "‚ùå Deployment failed!"
              exit 1
            fi
            
            sleep 30
          done
          
          echo "‚è±Ô∏è Deployment timed out"
          exit 1